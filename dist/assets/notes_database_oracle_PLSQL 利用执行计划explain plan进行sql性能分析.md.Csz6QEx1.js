import{_ as s,c as i,o as a,aa as l}from"./chunks/framework.BNtO-cOy.js";const E=JSON.parse('{"title":"plsql 利用执行计划 explain plan 进行 sql 性能分析","description":"","frontmatter":{},"headers":[],"relativePath":"notes/database/oracle/PLSQL 利用执行计划explain plan进行sql性能分析.md","filePath":"notes/database/oracle/PLSQL 利用执行计划explain plan进行sql性能分析.md","lastUpdated":1732182567000}'),n={name:"notes/database/oracle/PLSQL 利用执行计划explain plan进行sql性能分析.md"},e=l(`<h1 id="plsql-利用执行计划-explain-plan-进行-sql-性能分析" tabindex="-1">plsql 利用执行计划 explain plan 进行 sql 性能分析 <a class="header-anchor" href="#plsql-利用执行计划-explain-plan-进行-sql-性能分析" aria-label="Permalink to &quot;plsql 利用执行计划 explain plan 进行 sql 性能分析&quot;">​</a></h1><h2 id="执行计划简介" tabindex="-1">执行计划简介 <a class="header-anchor" href="#执行计划简介" aria-label="Permalink to &quot;执行计划简介&quot;">​</a></h2><h3 id="什么是执行计划-explain-plan" tabindex="-1">什么是执行计划 (Explain plan)？ <a class="header-anchor" href="#什么是执行计划-explain-plan" aria-label="Permalink to &quot;什么是执行计划 (Explain plan)？&quot;">​</a></h3><p>: 执行计划是一条查询语句在 Oracle 中的执行过程或访问路径的描述。</p><h3 id="怎样查看-oracle-执行计划" tabindex="-1">怎样查看 Oracle 执行计划？ <a class="header-anchor" href="#怎样查看-oracle-执行计划" aria-label="Permalink to &quot;怎样查看 Oracle 执行计划？&quot;">​</a></h3><p>以 PLSQL 为例：</p><ul><li><p>在 ：file—&gt;new—&gt; Explain Plan Window, 打开解释计划窗口。</p><p><img src="https://y.creammint.cn/articles/images/image-20241121164016808.png" alt="image-20241121164016808"></p></li><li><p>在：tools —&gt; Preferences —&gt; Plan Window；根据需要配置要显示在执行计划中的列。</p><p><img src="https://y.creammint.cn/articles/images/image-20241121164230443.png" alt="image-20241121164230443"></p></li></ul><h3 id="执行计划常用列介绍" tabindex="-1">执行计划常用列介绍 <a class="header-anchor" href="#执行计划常用列介绍" aria-label="Permalink to &quot;执行计划常用列介绍&quot;">​</a></h3><ul><li><p><strong>基数（Rows）</strong>：Oracle 估计的当前操作的返回结果集行数</p></li><li><p><strong>字节（Bytes）</strong>：执行该步骤后返回的字节数</p></li><li><p><strong>耗费（COST）、CPU 耗费</strong>：Oracle 估计的该步骤的执行成本 用于说明 SQL 执行的代价，理论上越小越好（该值可能与实际有出入）</p></li><li><p><strong>操作（OPERATION）</strong>： 当前步骤所执行的操作类型。常见操作包括<code>TABLE ACCESS</code>（表访问）、<code>INDEX SCAN</code>（索引扫描）、<code>JOIN</code>（连接操作）等。</p></li><li><p><strong>选项（OPTIONS）</strong>： 操作的具体策略或选项，进一步描述执行步骤。</p><p><code>TABLE ACCESS</code>的选项可能是</p><ul><li><code>FULL</code>（全表扫描）</li><li><code>BY INDEX ROWID</code>（通过索引访问）</li></ul></li></ul><h2 id="使用执行计划分析-sql" tabindex="-1">使用执行计划分析 SQL <a class="header-anchor" href="#使用执行计划分析-sql" aria-label="Permalink to &quot;使用执行计划分析 SQL&quot;">​</a></h2><h3 id="建立百万级别表-sp" tabindex="-1">建立百万级别表 sp <a class="header-anchor" href="#建立百万级别表-sp" aria-label="Permalink to &quot;建立百万级别表 sp&quot;">​</a></h3><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   AS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rownum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n, rpad(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pad </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dual</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CONNECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--建立索引并添加主键</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unique index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t_pk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sp(n);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> constraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_pk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_pk</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol><li><p>利用 Oracle 特有的“connect by”树形连接语法生成测试记录，“level &lt;= 10”表示要生成 10 记录；</p></li><li><p>利用 rownum 虚拟列生成递增的整数数据；</p></li><li><p>rpad(源字符串,length,填充字符串);当源字符串的长度大于定长 length 时，rpad 为在源字符串的右侧填充指定字符或者空格；</p></li></ol><h3 id="打开-explain-plan-窗口进行-sql-分析" tabindex="-1">打开 explain plan 窗口进行 sql 分析 <a class="header-anchor" href="#打开-explain-plan-窗口进行-sql-分析" aria-label="Permalink to &quot;打开 explain plan 窗口进行 sql 分析&quot;">​</a></h3><ol><li><p>未索引：select * from sp</p><p>全表扫描：TABLE ACCESS FULL 、耗费：4222 、CPU 耗费：271691255 、IO 耗费：4213</p><p><img src="https://y.creammint.cn/articles/images/image-20241121165728170.png" alt="image-20241121165728170"></p></li><li><p>使用索引后：select count(*) from sp –&gt;count(*)的时候使用了索引快速扫描</p><p>扫描到索引： INDEX FAST FULL SCAN、耗费：584、CPU 耗费:135197153、IO 耗费：580</p><p><img src="https://y.creammint.cn/articles/images/image-20241121165758085.png" alt="image-20241121165758085"></p></li></ol><p>以上是最直观的一个例子，也可以使用 hint 函数或者 move 表之后进行索引重建以便直观的发现 sql 执行性能的问题 更多操作：</p><ul><li><p>进行 move table 索引失效,优化器表示为全表扫描</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>重建索引,再次查询时，优化器扫描到索引，性能加快</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_pk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rebuild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>返回了整个表的大部分数据使用了全表扫描</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pad) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">799990</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>返回小部分数据时，使用的是索引扫描</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pad) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9990</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>使用 full，是进行全表扫描（虽然就查 10 条 但是很耗费资源）</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*+ full(sp)*/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pad) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>全表扫描：TABLE ACCESS FULL 、耗费：4222 、CPU 耗费：284046613 、IO 耗费：4213</p></li></ul><h3 id="hint-函数简介" tabindex="-1">Hint 函数简介 <a class="header-anchor" href="#hint-函数简介" aria-label="Permalink to &quot;Hint 函数简介&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://www.cnblogs.com/emilyyoucan/p/7844795.html" target="_blank" rel="noreferrer">oracle 中 hint 详解</a></p></div><ul><li><p>什么是 Hint？ ： Hint 是 Oracle 数据库提供的一种机制用来告诉优化器按照 hint 告诉它的方式生成执行计划。 是很多 DBA 优化中常用的一个手段</p></li><li><p>有哪些常用的 Hint？</p><ul><li><p>Hint 分为优化器相关、访问路径相关、和查询转换相关等等</p><ul><li><p>/*+ALL_ROWS*/表明对语句块选择基于开销的优化方法,并获得最佳吞吐量,使资源消耗最小化</p></li><li><p>/*+FULL(TABLE)*/表明对表选择全局扫描的方法</p></li><li><p>/*+INDEX(TABLE INDEX_NAME)*/表明对表选择索引的扫描方法</p></li></ul></li></ul></li></ul>`,20),p=[e];function t(h,r,k,d,c,o){return a(),i("div",null,p)}const u=s(n,[["render",t]]);export{E as __pageData,u as default};
